function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Feb-2024 18:18:56.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [273;1];
x1_step1.gain = [0.02;0.002002002002002];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.29372403915256645179;1.168963935211287497;-0.63043411593191966968];
IW1_1 = [0.64595314279793702994 -0.13577401717141457382;0.51370859289760351096 0.54567330850816675447;0.67468342698607708385 -0.76707892294666546462];

% Layer 2
b2 = [0.26686979744083066945;-0.076899921495714868014;0.93984531382767866337];
LW2_1 = [-0.046069688994832144746 -1.5913991916304348617 0.68249805678155350819;1.657016980344600432 -1.9686046168582362892 -1.0094375606056764649;0.92524242214932683748 -0.45915679357184491227 0.59654493424610388619];

% Layer 3
b3 = [0.23715647737689560248;-0.77833200084014342313;0.2464710255355543056];
LW3_2 = [0.78941508173748964339 0.011484096762404357589 0.70543594961297606538;1.7731106774893432565 2.5131542685953247585 1.525152788596395359;-0.49137938974157158167 -0.93095437171452932734 2.331145683121673251];

% Layer 4
b4 = -0.16392364421578986544;
LW4_3 = [-1.0303964359961819142 -1.4049772492216947573 -1.7715889268308566695];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.27958659157346;
y1_step1.xoffset = 0.000524244;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = repmat(b4,1,Q) + LW4_3*a3;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = sigmoid_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
